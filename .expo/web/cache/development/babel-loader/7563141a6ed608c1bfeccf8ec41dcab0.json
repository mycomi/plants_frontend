{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE } from \"../constants/index\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        console.log(snapshot.data());\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('dose not exit');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/mycom/Desktop/405/Project/frontend/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","firebase","require","fetchUser","dispatch","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","console","log","data","type","fetchUserPosts","orderBy","posts","docs","map","id"],"mappings":";;;;;;AAAA,SAASA,iBAAT,EAA2BC,uBAA3B;AACA,OAAOC,QAAP,MAAqB,UAArB;;AACAC,OAAO,CAAC,oBAAD,CAAP;;AAEA,OAAO,SAASC,SAAT,GAAoB;AACvB,SAAQ,UAACC,QAAD,EAAc;AAClBH,IAAAA,QAAQ,CAACI,SAAT,GACKC,UADL,CACgB,OADhB,EAEKC,GAFL,CAESN,QAAQ,CAACO,IAAT,GAAgBC,WAAhB,CAA4BC,GAFrC,EAGKC,GAHL,GAIKC,IAJL,CAIU,UAACC,QAAD,EAAc;AAChB,UAAIA,QAAQ,CAACC,MAAb,EAAoB;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAAT,EAAZ;AACAb,QAAAA,QAAQ,CAAC;AAACc,UAAAA,IAAI,EAAEnB,iBAAP;AAA0BU,UAAAA,WAAW,EAAEI,QAAQ,CAACI,IAAT;AAAvC,SAAD,CAAR;AACH,OAHD,MAII;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH;AACJ,KAZL;AAaH,GAdD;AAeH;AAED,OAAO,SAASG,cAAT,GAA0B;AAC7B,SAAQ,UAACf,QAAD,EAAc;AAClBH,IAAAA,QAAQ,CAACI,SAAT,GACKC,UADL,CACgB,OADhB,EAEKC,GAFL,CAESN,QAAQ,CAACO,IAAT,GAAgBC,WAAhB,CAA4BC,GAFrC,EAGKJ,UAHL,CAGgB,WAHhB,EAIKc,OAJL,CAIa,UAJb,EAIyB,KAJzB,EAKKT,GALL,GAMKC,IANL,CAMU,UAACC,QAAD,EAAc;AAChB,UAAIQ,KAAK,GAAGR,QAAQ,CAACS,IAAT,CAAcC,GAAd,CAAkB,UAAAhB,GAAG,EAAI;AACjC,YAAMU,IAAI,GAAGV,GAAG,CAACU,IAAJ,EAAb;AACA,YAAMO,EAAE,GAAGjB,GAAG,CAACiB,EAAf;AACA;AAASA,UAAAA,EAAE,EAAFA;AAAT,WAAgBP,IAAhB;AACH,OAJW,CAAZ;AAKAb,MAAAA,QAAQ,CAAC;AAAEc,QAAAA,IAAI,EAAElB,uBAAR;AAAiCqB,QAAAA,KAAK,EAALA;AAAjC,OAAD,CAAR;AACH,KAbL;AAcH,GAfD;AAgBH","sourcesContent":["import { USER_STATE_CHANGE,USER_POSTS_STATE_CHANGE } from '../constants/index'\r\nimport firebase from 'firebase'\r\nrequire('firebase/firestore')\r\n\r\nexport function fetchUser(){\r\n    return ((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"users\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .get()\r\n            .then((snapshot) => {\r\n                if (snapshot.exists){\r\n                    console.log(snapshot.data())\r\n                    dispatch({type: USER_STATE_CHANGE, currentUser: snapshot.data()})\r\n                }\r\n                else{\r\n                    console.log('dose not exit')\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchUserPosts() {\r\n    return ((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"userPosts\")\r\n            .orderBy(\"creation\", \"asc\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                let posts = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: USER_POSTS_STATE_CHANGE, posts })\r\n            })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}